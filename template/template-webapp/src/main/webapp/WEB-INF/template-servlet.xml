<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="modules.*.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出为false -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <property name="prettyPrint" value="false"/>
                <property name="objectMapper">
                    <bean class="org.yserver.utils.json.JsonMapper"></bean>
                </property>
            </bean>
            <!-- 使用XML格式输出数据 -->
            <!--<bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">-->
            <!--<constructor-arg>-->
            <!--<bean class="org.springframework.oxm.xstream.XStreamMarshaller">-->
            <!--<property name="streamDriver">-->
            <!--<bean class="com.thoughtworks.xstream.io.xml.StaxDriver"/>-->
            <!--</property>-->
            <!--<property name="annotatedClasses">-->
            <!--<list>-->
            <!--<value>org.yserver.core.xxx.xxxEntity</value>-->
            <!--</list>-->
            <!--</property>-->
            <!--</bean>-->
            <!--</constructor-arg>-->
            <!--<property name="supportedMediaTypes" value="application/xml"></property>-->
            <!--</bean>-->
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">
            <map>
                <entry key="xml" value="application/xml"/>
                <entry key="json" value="application/json"/>
            </map>
        </property>
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="favorPathExtension" value="true"/>
    </bean>

    <!-- Default viewClass: JSTL view (JSP with html output) -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- Example: a logical view name of 'vets' is mapped to '/WEB-INF/jsp/vets.jsp' -->
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <!-- ContentNegotiatingViewResolver类根据不同的请求，将返回会结果指派给InternalResourceViewResolver和BeanNameViewResolver来处理,
		当媒体类型是'text/html'是, 将指派给InternalResourceViewResolver类处理, 其他类型，将指派给 BeanNameViewResolver类处理。 -->
    <!--<bean-->
    <!--class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">-->
    <!--<property name="contentNegotiationManager" ref="contentNegotiationManager"/>-->

    <!--<property name="viewResolvers">-->
    <!--<list>-->
    <!--&lt;!&ndash; Used here for 'xml' and 'atom' views &ndash;&gt;-->
    <!--<bean class="org.springframework.web.servlet.view.BeanNameViewResolver"></bean>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
    <mvc:default-servlet-handler/>

    <!-- 对静态资源文件的访问 restful -->
    <mvc:resources mapping="/source/**" location="/WEB-INF/source/"/>

    <!-- 定义无Controller的path<->view直接映射 -->
    <mvc:view-controller path="/" view-name="redirect:/"/>

    <bean id="exceptionResolver" class="org.yserver.core.exception.CustomHandlerExceptionResolver"></bean>

    <!-- 上传拦截，如最大上传值及最小上传值 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize">
            <value>104857600</value>
        </property>
        <property name="maxInMemorySize">
            <value>4096</value>
        </property>
        <property name="defaultEncoding">
            <value>utf-8</value>
        </property>
    </bean>
</beans>